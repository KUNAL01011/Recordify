// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String          @unique
  firstName      String?
  lastName       String?
  createdAt      DateTime        @default(now())
  clerkId        String          @unique
  studio         Media?
  avatar         String?
  workSpaces     WorkSpace[]
  videos         Video[]
  subscription   Subscription?
  members        Member[]
  notifications  Notification[]
  senders        Invite[]        @relation("sender")
  receivers      Invite[]        @relation("receiver")
  trail          Boolean         @default(false)
  firstView      Boolean         @default(false)
  comments       Comment[]
}

model Comment {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  comment    String
  replies    Comment[]    @relation("reply")
  parent     Comment?     @relation("reply", fields: [commentId], references: [id])
  commentId  String?      @db.Uuid
  user       User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?      @db.Uuid
  video      Video?       @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId    String?      @db.Uuid
  createdAt  DateTime     @default(now())
}

model Subscription {
  id           String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user         User?             @relation(fields: [userId], references: [id])
  userId       String?           @unique @db.Uuid
  createdAt    DateTime          @default(now())
  plan         SubscriptionPlan  @default(FREE)
  updatedAt    DateTime          @default(now())
  customer     String?           @unique
}

model Media {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  screen     String?
  mic        String?
  camera     String?
  preset     Preset     @default(SD)
  user       User?      @relation(fields: [userId], references: [id])
  userId     String?    @unique @db.Uuid
}

model WorkSpace {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type       Type
  name       String
  user       User?        @relation(fields: [userId], references: [id])
  userId     String?      @db.Uuid
  createdAt  DateTime     @default(now())
  folders    Folder[]
  videos     Video[]
  members    Member[]
  invites    Invite[]
}

model Folder {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String       @default("Untitled Folder")
  createdAt   DateTime     @default(now())
  workSpace   WorkSpace?   @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?      @db.Uuid
  videos      Video[]
}

model Video {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String?     @default("Untitled Video")
  description String?     @default("No Description")
  source      String      @unique
  createdAt   DateTime    @default(now())
  folder      Folder?     @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId    String?     @db.Uuid
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?     @db.Uuid
  processing  Boolean     @default(true)
  workSpace   WorkSpace?  @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  workSpaceId String?     @db.Uuid
  views       Int         @default(0)
  summary     String?
  comments    Comment[]
}

model Member {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user        User?        @relation(fields: [userId], references: [id])
  userId      String?      @db.Uuid
  createdAt   DateTime     @default(now())
  isMember    Boolean      @default(true)
  workSpace   WorkSpace?   @relation(fields: [workSpaceId], references: [id])
  workSpaceId String       @db.Uuid
}

model Notification {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?   @db.Uuid
  content    String
}

model Invite {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sender       User?       @relation("sender", fields: [senderId], references: [id])
  senderId     String?     @db.Uuid
  receiver     User?       @relation("receiver", fields: [receiverId], references: [id])
  receiverId   String      @db.Uuid
  content      String
  workSpace    WorkSpace?  @relation(fields: [workSpaceId], references: [id])
  workSpaceId  String?     @db.Uuid
  accepted     Boolean     @default(false)
}

enum Type {
  PERSONAL
  PUBLIC
}

enum Preset {
  HD
  SD
}

enum SubscriptionPlan {
  PRO 
  FREE
}
